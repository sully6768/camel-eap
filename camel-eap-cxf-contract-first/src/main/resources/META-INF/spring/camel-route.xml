<?xml version="1.0" encoding="UTF-8"?>
<!--
  #%L
  Copyright (C) 2013 - 2016 RedHat
  %%
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  #L%
  -->
<beans
    xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:camel="http://camel.apache.org/schema/spring"
    xmlns:cxf="http://camel.apache.org/schema/cxf"
    xsi:schemaLocation="
         http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
         http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
         http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd">

    <bean
        id="soapActionInInterceptor"
        class="com.redhat.eap.camel.cxf.contract.first.SoapActionInInterceptor" />

    <cxf:cxfEndpoint
        id="orderEndpoint"
        address="/order"
        serviceClass="camelinaction.order.OrderEndpoint"
        wsdlURL="wsdl/order.wsdl">
        <cxf:inInterceptors>
            <ref bean="soapActionInInterceptor" />
        </cxf:inInterceptors>
    </cxf:cxfEndpoint>

    <bean
        id="soapProcessor"
        class="com.redhat.eap.camel.cxf.contract.first.SoapProcessor" />

    <camelContext xmlns="http://camel.apache.org/schema/spring">

        <route id="_cxf_router">
            <!-- route starts from the cxf webservice, see camel-cxf.xml for details -->
            <from
                id="_cxf_endpoint"
                uri="cxf:bean:orderEndpoint" />
            <log message="Post Processor: ${headers} : ${body}" />
            <to
                id="_seda_out"
                uri="seda:incomingOrders" />
            <!-- and then create the OK reply for the webservice which is still waiting for a reply -->
            <transform>
                <constant>OK</constant>
            </transform>
        </route>
  
        <!-- test route -->
        <route id="_seda_router">
            <from uri="seda:incomingOrders" />
            <camel:convertBodyTo type="String" />
            <log message="Message Body: ${headers} : ${body}" />
        </route>
    </camelContext>

</beans>
