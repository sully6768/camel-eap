<?xml version="1.0" encoding="UTF-8"?>
<!--
  #%L
  Wildfly Camel
  %%
  Copyright (C) 2013 - 2016 RedHat
  %%
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  #L%
  -->
<beans
    xmlns="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:jee="http://www.springframework.org/schema/jee"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
        http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">

    <jee:jndi-lookup
        expected-type="javax.sql.DataSource"
        id="quartzDataSource"
        jndi-name="java:jboss/datasources/MYSQLQUARTZDS" />

    <jee:jndi-lookup
        expected-type="javax.sql.DataSource"
        id="employeeDataSource"
        jndi-name="java:jboss/datasources/EMPDS" />

    <jee:jndi-lookup
        expected-type="javax.jms.ConnectionFactory"
        id="amqConnectionFactory"
        jndi-name="java:/activemq/ConnectionFactory" />

    <bean
        class="org.apache.camel.component.quartz2.QuartzComponent"
        id="quartz">
        <property
            name="scheduler"
            ref="scheduler" />
    </bean>
    <bean
        class="org.springframework.scheduling.quartz.SchedulerFactoryBean"
        id="scheduler">
        <property
            name="dataSource"
            ref="quartzDataSource" />
        <property
            name="autoStartup"
            value="false" />
        <property name="schedulerContextAsMap">
            <!-- hook Camel into Quartz -->
            <map>
                <!-- CamelJob makes use of the following key below to find the same Job as we failover to 'app-two' -->
                <!-- QuartzConstants.QUARTZ_CAMEL_CONTEXT + "-" + camelContextName  -->
                <entry
                    key="CamelQuartzCamelContext"
                    value-ref="quartzCluster" />
            </map>
        </property>
        <property name="quartzProperties">
            <props>
                <prop key="org.quartz.scheduler.instanceName">demoscheduler</prop>
                <prop key="org.quartz.scheduler.instanceId">AUTO</prop>
                <prop key="org.quartz.scheduler.skipUpdateCheck">true</prop>
                <prop key="org.quartz.jobStore.driverDelegateClass">org.quartz.impl.jdbcjobstore.StdJDBCDelegate</prop>
                <prop key="org.quartz.jobStore.isClustered">true</prop>
                <prop key="org.quartz.jobStore.clusterCheckinInterval">5000</prop>
            </props>
        </property>
    </bean>

    <bean
        class="com.redhat.wildfly.camel.spring.quartz.DataProcessor"
        id="dataProcessor" />

    <bean
        class="org.apache.camel.component.metrics.routepolicy.MetricsRoutePolicyFactory"
        id="metricsRoutePolicyFactory" />

    <bean
        id="useLatestAggregationStrategy"
        class="org.apache.camel.processor.aggregate.UseLatestAggregationStrategy" />



    <bean
        id="jmsConfig"
        class="org.apache.camel.component.jms.JmsConfiguration">
        <property
            name="connectionFactory"
            ref="amqConnectionFactory" />
        <property
            name="concurrentConsumers"
            value="10" />
    </bean>
    
    
 
<!-- configure the Camel SQL component to use the JDBC data source -->
    <bean
        id="sql"
        class="org.apache.camel.component.sql.SqlComponent">
        <property
            name="dataSource"
            ref="employeeDataSource" />
    </bean>

    <bean
        id="activemq"
        class="org.apache.activemq.camel.component.ActiveMQComponent">
        <property
            name="configuration"
            ref="jmsConfig" />
        <!-- if we are using transacted then enable CACHE_CONSUMER (if not using XA) to run faster
             see more details at: http://camel.apache.org/jms
        <property name="transacted" value="true"/>
        <property name="cacheLevelName" value="CACHE_CONSUMER" />
        -->
    </bean>

    <camelContext
        id="quartzCluster"
        xmlns="http://camel.apache.org/schema/spring">

        <route id="_clusteredRoute1">
            <from
                id="_from1"
                uri="quartz://clustergroup/clusterTimerName?job.name=demoQuartzCluster&amp;cron=0/5+*+*+*+*+?" />
            <enrich
                uri="sql:select * from employees where emp_no = 10001"
                strategyRef="useLatestAggregationStrategy" />
            <marshal>
                <json prettyPrint="true" />
            </marshal>
            <to id="_jms_producer" uri="activemq:queue:SQLPROCESSORQueue"/>
<!--             <log -->
<!--                 id="_log1" -->
<!--                 message="Fired quartz cluster trigger: ${body}" /> -->
        </route>
    </camelContext>
</beans>
